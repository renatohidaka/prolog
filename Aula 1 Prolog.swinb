<div class="notebook">

<div class="nb-cell markdown" name="md1">
## Aula 1: Fatos, Regras e Consultas
</div>

<div class="nb-cell markdown" name="md2">
### **Programa:** Para escrever um programa em **Prolog** é necessário codificar uma base de conhecimento.
</div>

<div class="nb-cell markdown" name="md3">
### **Base de conhecimento:** Uma base de conhecimento é formada por cláusulas.
</div>

<div class="nb-cell markdown" name="md4">
### **Cláusula**: Uma cláusula pode ser definida por um fato ou uma regra.
</div>

<div class="nb-cell markdown" name="md5">
### **Fato**: Fatos são utilizados para construir cláusulas que são incodicionamente verdadeiras.
</div>

<div class="nb-cell markdown" name="md7">
### **Fato**: Os fatos são um meio de afirmar que existe uma relação entre os objetos.
</div>

<div class="nb-cell markdown" name="md8">
### **Sintaxe de um Fato**: predicado(atomo,...,atomo).
</div>

<div class="nb-cell markdown" name="md6">
### Exemplo:
</div>

<div class="nb-cell program" data-background="true" name="p1">
homem(pedro).
mulher(maria).
pai(pedro, josé).
pai(pedro, maria).
</div>

<div class="nb-cell markdown" name="md9">
### Vamos fazer algumas consultas:
</div>

<div class="nb-cell markdown" name="md10">
### **Consulta 01:** Pedro é homem?
</div>

<div class="nb-cell query" name="q1">
homem(pedro)
</div>

<div class="nb-cell markdown" name="md11">
### **Consulta 02:** Maria é homem?
</div>

<div class="nb-cell query" name="q2">
homem(maria)
</div>

<div class="nb-cell markdown" name="md12">
### **Consulta 03:** Pedro é pai de José?
</div>

<div class="nb-cell query" name="q3">
pai(pedro, josé)
</div>

<div class="nb-cell markdown" name="md13">
### **Consulta 04:** Pedro é pai de quem?
</div>

<div class="nb-cell query" name="q4">
pai(pedro, F)
</div>

<div class="nb-cell markdown" name="md14">
### Na **Consulta 04** nós utilizamos a variável F para realizar a consulta. Nesse caso, será atribuído a F, todos os átomos que satisfazem a condição para que a cláusula seja verdadeira e retornada como resposta.
</div>

<div class="nb-cell markdown" name="md16">
### Em Prolog, as variáveis comuns devem iniciar com letra maiúscula. Caso você tente criar uma variável iniciando com letra minúscula, na verdade, o que você vai estar fazendo é cirando um átomo.
</div>

<div class="nb-cell markdown" name="md15">
### **Consulta 05:** Quem é o pai de Maria?
</div>

<div class="nb-cell query" name="q5">
pai(P, maria)
</div>

<div class="nb-cell markdown" name="md17">
### **Consulta 06:** Quais são as relações de pai existente na base de conhecimento?
</div>

<div class="nb-cell query" name="q6">
pai(P, F)
</div>

<div class="nb-cell markdown" name="md18">
### **Consulta 07:** José é irmão de Maria?
</div>

<div class="nb-cell query" name="q7">
irmão(josé, maria)
</div>

<div class="nb-cell markdown" name="md19">
### Não é possível realizar a **Consulta 07**, uma vez que não existe na base de conhecimento nenhuma cláusula que tenha o predicado irmão.
</div>

<div class="nb-cell markdown" name="md20">
### **Regra**: Diferentemente dos fados que são incodicionalmente verdadeiros, a regra é uma clásula condicionalmente verdadeira, ou seja, que pode ser verdadeira ou não.
</div>

<div class="nb-cell markdown" name="md21">
### **Regra:** Uma regra é formada por duas partes, denominadas cabeça e corpo. Sua sintaxe se dá da seguinte forma:
</div>

<div class="nb-cell markdown" name="md22">
### **Regra**: cabeça :- corpo
</div>

<div class="nb-cell markdown" name="md23">
### **Regra:** Uma regra só será verdadeira se a sua cabeça for verdadeira.
</div>

<div class="nb-cell markdown" name="md24">
### **Regra:** A cabeça da regra só será verdadeira se o corpo for verdadeiro. Sendo assim, podemos considerar que a veracidade de uma regra é determinada pelo seu corpo.
</div>

<div class="nb-cell markdown" name="md25">
### **Regra**: O corpo de de uma regra pode ser formado por mais de uma cláusula da base de conhecimento. Quando este for o caso, entre as cláusulas do corpo de uma regra há a necessidade de utilização de um operador lógico de conjunção (E) ou disjunção (OU).
</div>

<div class="nb-cell markdown" name="md26">
### No Prolog, o operador de conjunção é representado pela vígurla e o operador de disjunção é representado pelo ponto e vírgula.
</div>

<div class="nb-cell markdown" name="md27">
### Sabendo disso, vamos criar a nossa regra para determinar a relação de irmão.
</div>

<div class="nb-cell program" name="p2">
irmão(X, Y) :- pai(P, X), pai(P, Y).
</div>

<div class="nb-cell markdown" name="md28">
### Agora vamos repetir a nossa **Consulta 07:** José é irmão de Maria?
</div>

<div class="nb-cell query" name="q8">
irmão(josé, maria)
</div>

<div class="nb-cell markdown" name="md29">
### **Consulta 08:** Maria é irmão de José?
</div>

<div class="nb-cell query" name="q9">
irmão(maria, josé)
</div>

<div class="nb-cell markdown" name="md30">
### **Consulta 09:** José é irmão dele mesmo?
</div>

<div class="nb-cell query" name="q10">
irmão(josé, josé)
</div>

<div class="nb-cell markdown" name="md31">
### Na **Consulta 09**, temos um problema, pois, claramente, uma pessoa não é irmão dela mesma. Mas por que a resposta foi verdadeira para essa consulta?
</div>

<div class="nb-cell markdown" name="md32">
### A respota está na forma como o algoritmo backtracking que faz a varredura da base de conhecimento trabalha. Explicarei mais sobre ele em sala de aula.
</div>

<div class="nb-cell markdown" name="md33">
### Para evitar que uma pessoa seja irmão dela mesma, devemos acrescentar mais uma cláusula para garantir que X seja diferente de Y. Podemos fazer isso da seguinte forma:
</div>

<div class="nb-cell program" name="p3">
irmão(X, Y) :- pai(P, X), pai(P, Y), X \== Y.
</div>

<div class="nb-cell markdown" name="md34">
### Agora, o corpo da nossa regra possui três partes, todas separadas pelo operador de conjunção (E). Em linguagem natural, a nossa regra pode ser lida da seguinte forma:
</div>

<div class="nb-cell markdown" name="md35">
### X é irmão de Y, se P é pai de X e P é pai de Y e X é diferente de Y
</div>

<div class="nb-cell markdown" name="md36">
### **Estilo:** Quando o corpo da regra possui muitas cláusulas, por questão de melhor leitura do código, podemos utilizar o seguinte estilo:
</div>

<div class="nb-cell program" name="p4">
irmão(X, Y) :- pai(P, X), 
    		   pai(P, Y),
               X \== Y.
</div>

<div class="nb-cell markdown" name="md37">
### **Exercício:** Vamos construir a base de conhecimento da Figura 1 da seguinte forma:
</div>

<div class="nb-cell markdown" name="md38">
### **R1:** Crie os fatos para estabeler quem é homem e quem é mulher.
</div>

<div class="nb-cell markdown" name="md39">
### **R2:** Cire os fatos para estabeler as relações de pai e mãe.
</div>

<div class="nb-cell markdown" name="md40">
### **R3:** Crie a regra gerou(X,Y) tal que X gerou Y se X é pai ou mãe de Y.
</div>

<div class="nb-cell markdown" name="md41">
### **R4:** Crie a regra para estabeler a relação de irmão
</div>

<div class="nb-cell markdown" name="md42">
### **R5:** Crie a regra para estabeler a relação de irmã
</div>

<div class="nb-cell markdown" name="md43">
### **R6:** Crie a regra para estabeler a relação de tio
</div>

<div class="nb-cell markdown" name="md45">
### **R7:** Crie a regra para estabeler a relação de tia
</div>

<div class="nb-cell markdown" name="md46">
### **R8:** Crie a regra para estabeler a relação de avô
</div>

<div class="nb-cell markdown" name="md47">
### **R9:** Crie a regra para estabeler a relação de avó
</div>

<div class="nb-cell markdown" name="md44">
### **R10:** Codifique as regras equivalentes a seguinte sentença: Um casal é formado por duas pessoas que têm filhos em comum.
</div>

<div class="nb-cell markdown" name="md48">
### **R11:** Codifique as regras equivalentes a seguinte sentença: Todo mundo que tem filhos é feliz.
</div>

</div>
